
const serverUrl = "https://5afgk9nae19l.usemoralis.com:2053/server";
const appId = "lhSPMJb08k6pB25ESY87s7VxvnNZobzHLWHbs8yj";
Moralis.start({ serverUrl, appId });
const TOKEN_CONTRACT_ADDRESS = "0x1d7C322d4Ff0dDB53F9987c9b5C60eFB05354EB1";
var Buffer = require('buffer/').Buffer  // note: the trailing slash is important!

async function login() {
  hideElement(userItemsSection);
  hideElement(userInfo);
  hideElement(createItemForm);
  window.web3 = await Moralis.Web3.enable();
  window.tokenContract = new web3.eth.Contract(tokenContractAbi, TOKEN_CONTRACT_ADDRESS);
  let user = Moralis.User.current();
  if (!user) {
    user = await Moralis.authenticate({ signingMessage: "Log in using Moralis" })
    .then(function (user) {
      console.log("logged in user:", user);
      console.log(user.get('ethAddress'));
    })
    .catch(function (error) {
      console(error);
    });
    initUser();
  }
}

initUser = async () => {
  if (await Moralis.User.current())
  {
    window.web3 = await Moralis.Web3.enable();
    window.tokenContract = new web3.eth.Contract(tokenContractAbi, TOKEN_CONTRACT_ADDRESS);
    hideElement(userConnectButton);
    showElement(userProfileButton);
    showElement(openCreateItemButton);
    showElement(openUserItemsButton);
    // LoadUserItems();
  }
  else
  {
    showElement(userConnectButton);
    hideElement(userProfileButton);
    hideElement(openCreateItemButton);
    hideElement(openUserItemsButton);
  } 
}

initUser();

logOut = async ()  =>{
  await Moralis.User.logOut();
  hideElement(userInfo);
  initUser();
}

openUserInfo = async () => {
  user = await Moralis.User.current();
  if (user)
  {
    const email = user.get('email');
    if(email){
      userEmailField.value = email;
    }else{
      userUsernameField.value = "";
    }
    userUsernameField.value = user.get('username');
    
    const userAvatar = user.get('avatar');
    if(userAvatar){
      userAvatarImg.src = userAvatar.url();
      showElement(userAvatarImg)
    } else{
      hideElement(userAvatarImg);
    }
    showElement(userInfo);
  }
  else
  {
    login();
  }
}

saveUserInfo = async () => {
  user.set('email', userEmailField.value);
  user.set('username', userUsernameField.value);
  
  if (userAvatarFile.files.length > 0){
    // Moralis can handle any kind of file but her we specify jpegS
    const avatar = new Moralis.File("avatar.jpg", userAvatarFile.files[0]);
    //dont worry about name colisions theyr given names and track by element Id
    user.set('avatar', avatar);
  }
  await user.save();
  alert("We got your info stored!");
  openUserInfo();
}


createItem = async () => {
  if (createItemFile.files.length == 0){
    alert("Are you gonna select a file?");
    return;
  } else if (createItemNameField.value.length == 0){
    alert("You need to give the file a name!");
    return;
  }

}
openUserItems = async () => {
  user = await Moralis.User.current();
  if (user){    
      showElement(userItemsSection);
  }else{
      login();
  }

  const nftFile = new Moralis.File("nftFile",createItemFile.files[0]);
  await nftFile.saveIPFS();
  
  const nftFilePath = nftFile.ipfs();
  const nftFileHash = nftFile.hash();

  const metadata = {
    name: createItemNameField.value,
    description: createItemDescriptionField.value,
    image: nftFilePath,
  };
  
 const nftFileMetadataFile = new Moralis.File("metadata.json", {base64: btoa(JSON.stringify(metadata))});
 await nftFileMetadataFile.saveIPFS();
//  console.log(JSON.stringify(nftFileMetadataFile))
  var nftFileMetadataFilePath = nftFileMetadataFile.ipfs();
  var nftFileMetadataFileHash = nftFileMetadataFile.hash();
 
 const nftId = await mintNft(nftFileMetadataFilePath);
  
  const Item = Moralis.Object.extend("Item");
  //create new instance of the class
  const item = new Item(); 
  item.set('name', createItemNameField.value);
  item.set('description', createItemDescriptionField.value);
  item.set('nftFilePath', nftFilePath);
  item.set('nftFileHash', nftFileHash);
  item.set('nftFileMetadataFilePath', nftFileMetadataFilePath);
  item.set('MetadataFileHash', nftFileMetadataFileHash);
  item.set('nftId', nftId);
  item.set('nftContractAddress', TOKEN_CONTRACT_ADDRESS);
  await item.save();
  console.log(item);
}

mintNft = async (metadataUrl) => {
  const receipt = await tokenContract.methods.createItem(metadataUrl).send({from: ethereum.selectedAddress});
  console.log(receipt);
  return receipt.events.Transfer.returnValues.tokenId;
}

LoadUserItems = async () => {
  const ownedItems = await Moralis.Cloud.run("getUserItems");
  ownedItems.forEach(item => {
    // const userItemListing = document.getElementById(`user-item-${item.tokenObjectId}`);
    // if (userItemListing) return;
    getAndRenderItemData(item, renderUserItem);
});
}
 
initTemplate = (id) => {
  const template = document.getElementById(id);
  template.id = "";
  template.parentNode.removeChild(template);
  return template;
}

renderUserItem = async (item) => {
  // const userItemListing = document.getElementById(`user-item-${item.tokenObjectId}`);
  // if (userItemListing) return;

  const userItem = userItemTemplate.cloneNode(true);
  userItem.getElementsByTagName("img")[0].src = item.image;
  userItem.getElementsByTagName("img")[0].alt = item.name;
  userItem.getElementsByTagName("h5")[0].innerText = item.name;
  userItem.getElementsByTagName("p")[0].innerText = item.description;

  // userItem.getElementsByTagName("input")[0].value = item.askingPrice ?? 1;
  // userItem.getElementsByTagName("input")[0].disabled = item.askingPrice > 0;
  // userItem.getElementsByTagName("button")[0].disabled = item.askingPrice > 0;
  // userItem.getElementsByTagName("button")[0].onclick = async () => {
  //     user = await Moralis.User.current();
  //     if (!user){
  //         login();
  //         return;
  //     }
  //     await ensureMarketplaceIsApproved(item.tokenId, item.tokenAddress);
  //     await marketplaceContract.methods.addItemToMarket(item.tokenId, item.tokenAddress, userItem.getElementsByTagName("input")[0].value).send({from: user.get('ethAddress') });
  // };

  // userItem.id = `user-item-${item.tokenObjectId}`
  userItems.appendChild(userItem);
}

getAndRenderItemData = (item, renderFunction) => {
    
  fetch(item.tokenUri)
  .then(response => response.json())
  .then(data => {
      data.symbol = item.symbol;
      data.tokenId = item.tokenId;
      data.tokenAddress = item.tokenAddress;
      // item.name = data.name;
      // item.description = data.description;
      // item.image = data.image;
      renderFunction(item);
  })
}

hideElement = (element) => element.style.display = "none";
showElement = (element) => element.style.display = "block";

//NavBar
const userConnectButton = document.getElementById("btnConnect");
userConnectButton.onclick = login;

const openCreateItemButton = document.getElementById("btnOpenCreateItem");
openCreateItemButton.onclick = () => showElement(createItemForm);

//User Profile
const userProfileButton = document.getElementById("btnUserInfo");
userProfileButton.onclick = openUserInfo;

const userInfo = document.getElementById("userInfo");
const userUsernameField = document.getElementById("txtUsername");
const userEmailField = document.getElementById("txtEmail");
const userAvatarImg = document.getElementById("imgAvater");
const userAvatarFile = document.getElementById("fileAvatar");

document.getElementById("btnCloseUserInfo").onclick = () => hideElement(userInfo);
document.getElementById("btnSaveUserInfo").onclick = saveUserInfo;
document.getElementById("btnLogout").onclick = logOut;

//Item Creation
const createItemForm = document.getElementById("createItem");

const createItemNameField = document.getElementById("txtCreateItemName");
const createItemDescriptionField = document.getElementById("txtCreateItemDescription");
const createItemPriceField = document.getElementById("numberCreateItemPrice");
const createItemStatusField = document.getElementById("selectCreateItemStatus");
const createItemFile = document.getElementById("fileCreateItemFile");

document.getElementById("btnCloseCreateItem").onclick = () => hideElement(createItemForm);
document.getElementById("btnCreateItem").onclick = createItem;

// User Items

const userItemsSection = document.getElementById("userItems");
const userItems = document.getElementById("userItemsList");
document.getElementById("btnCloseUserItems").onclick = () => hideElement(userItemsSection);
const openUserItemsButton = document.getElementById("btnMyItems");
openUserItemsButton.onclick = openUserItems;

const userItemTemplate = initTemplate("itemTemplate");



